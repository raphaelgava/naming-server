name: Continuous Integration with Github

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
        - name: Checkout main repository and submodules
          uses: actions/checkout@v4
          with:
              submodules: true # Isso garante que os submódulos sejam automaticamente clonados
      
        - name: Login to Docker Hub
          uses: docker/login-action@v3.4.0
          with:
              username: ${{ secrets.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_PASSWORD }}  

        - name: Setup Java JDK
          uses: actions/setup-java@v3.14.1
          with:
            # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
            java-version: '21'
            distribution: 'oracle'

        - name: Creating settings.xml file # Evitar o problema: [DEBUG] Failed to decrypt password for server github: org.sonatype.plexus.components.sec.dispatcher.SecDispatcherException: java.io.FileNotFoundException: /home/runner/.m2/settings-security.xml (No such file or directory)
          run: |
            mkdir -p ~/.m2
            cat <<EOF > ~/.m2/settings.xml
            <settings>
                <servers>
                    <server>
                        <id>github</id>
                        <username>${{ secrets.GITHUB_ACTOR }}</username>
                        <password>${{ secrets.GITHUB_TOKEN }}</password>
                    </server>
                </servers>
            </settings>
            EOF

        - name: Eureka Naming Server
          working-directory: ./
          run: mvn spring-boot:build-image -DskipTests -X -e -f pom.xml

        - name: Check directory structure
          run: |
            echo "Diretório atual:"
            pwd
            echo "Listando arquivos no diretório atual:"
            ls -l      
            echo "Listando arquivos no diretório components:"
            ls -l ./components
            echo "Finding directory"
            find ./ -type d -name "components" -print

        - name: API Gateway
          working-directory: ./components/api-gateway
          run: |
            if [ -f "./pom.xml" ]; then
              echo "Arquivo pom.xml do api-service encontrado. Executando Maven..."
              mvn spring-boot:build-image -DskipTests -X -e -f pom.xml
            else
              echo "Arquivo pom.xml do api-gateway não encontrado. Parando build."
              exit 1
            fi

        - name: MS Cambio
          working-directory: ./components/ms_cambio-service
          run: |
            if [ -f "./pom.xml" ]; then
              echo "Arquivo pom.xml do ms_cambio-service encontrado. Executando Maven..."
              mvn clean package -DskipTests -X -e -f pom.xml
            else
              echo "Arquivo pom.xml do ms_book-service não encontrado. Parando build."
              exit 1
            fi

        - name: MS Book
          working-directory: ./components/ms_book-service
          run: |
            if [ -f "./pom.xml" ]; then
              echo "Arquivo pom.xml do ms_book-service encontrado. Executando Maven..."
              mvn clean package -DskipTests -X -e -f pom.xml
            else
              echo "Arquivo pom.xml do ms_book-service não encontrado. Parando build."
              exit 1
            fi

        - name: Docker Compose Build
          working-directory: ./
          run: |
            if [ -f "./docker-compose.yml" ]; then
              echo "Arquivo docker-compose.yml encontrado. Executando Docker..."
              echo "Diretório atual:"
              pwd
              echo "Listando arquivos no diretório atual:"
              ls -l
              echo "Finding directory"
              find ./ -type d -name "target" -print
              docker compose build
            else
              echo "Arquivo docker-compose.yml não encontrado. Parando build."
              exit 1
            fi

        - name: Push Docker Hub Container Registry
          working-directory: ./
          run: | # | representa que são vários comandos
            echo "------"
            echo "user:${{ secrets.DOCKERHUB_USERNAME }}"
            echo "naming-server:${{ github.run_id }}"
            echo "------"
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/naming-server:0.0.1-SNAPSHOT ${{ secrets.DOCKERHUB_USERNAME }}/naming-server:${{ github.run_id }}
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:0.0.1-SNAPSHOT ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:${{ github.run_id }}
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/cambio-service:latest ${{ secrets.DOCKERHUB_USERNAME }}/cambio-service:${{ github.run_id }}
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/book-service:latest ${{ secrets.DOCKERHUB_USERNAME }}/book-service:${{ github.run_id }}
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/naming-server:${{ github.run_id }}
            echo "naming-server:${{ github.run_id }}"
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:${{ github.run_id }}
            echo "api-gateway:${{ github.run_id }}"
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/cambio-service:${{ github.run_id }}
            echo "cambio-service:${{ github.run_id }}"
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/book-service:${{ github.run_id }}
            echo "book-service:${{ github.run_id }}"
            
            
            

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# on:
#   schedule:
#     - cron: '43 6 * * *'
#   push:
#     branches: [ "main" ]
#     # Publish semver tags as releases.
#     tags: [ 'v*.*.*' ]
#   pull_request:
#     branches: [ "main" ]

# env:
#   # Use docker.io for Docker Hub if empty
#   REGISTRY: ghcr.io
#   # github.repository as <account>/<repo>
#   IMAGE_NAME: ${{ github.repository }}


# jobs:
#   build:

#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write
#       # This is used to complete the identity challenge
#       # with sigstore/fulcio when running outside of PRs.
#       id-token: write

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       # Install the cosign tool except on PR
#       # https://github.com/sigstore/cosign-installer
#       - name: Install cosign
#         if: github.event_name != 'pull_request'
#         uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
#         with:
#           cosign-release: 'v2.2.4'

#       # Set up BuildKit Docker container builder to be able to build
#       # multi-platform images and export cache
#       # https://github.com/docker/setup-buildx-action
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

#       # Login against a Docker registry except on PR
#       # https://github.com/docker/login-action
#       - name: Log into registry ${{ env.REGISTRY }}
#         if: github.event_name != 'pull_request'
#         uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       # Extract metadata (tags, labels) for Docker
#       # https://github.com/docker/metadata-action
#       - name: Extract Docker metadata
#         id: meta
#         uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

#       # Build and push Docker image with Buildx (don't push on PR)
#       # https://github.com/docker/build-push-action
#       - name: Build and push Docker image
#         id: build-and-push
#         uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
#         with:
#           context: .
#           push: ${{ github.event_name != 'pull_request' }}
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

#       # Sign the resulting Docker image digest except on PRs.
#       # This will only write to the public Rekor transparency log when the Docker
#       # repository is public to avoid leaking data.  If you would like to publish
#       # transparency data even for private images, pass --force to cosign below.
#       # https://github.com/sigstore/cosign
#       - name: Sign the published Docker image
#         if: ${{ github.event_name != 'pull_request' }}
#         env:
#           # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
#           TAGS: ${{ steps.meta.outputs.tags }}
#           DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        # run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
